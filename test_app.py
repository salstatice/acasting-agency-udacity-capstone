import os
import unittest
import json
from flask import Flask
from flask_sqlalchemy import SQLAlchemy

from models import db, Actor, Movie, Role
from app import app

# Set up database path and JWT token

database_path = os.environ['DATABASE_URL']
assistant_token = os.environ['ASSISTANT_TOKEN']
director_token = os.environ['DIRECTOR_TOKEN']
producer_token = os.environ['PRODUCER_TOKEN']


class ACastingTestCase(unittest.TestCase):
    ''' This class represents the ACasting test case'''
    @classmethod
    def setUpClass(cls):
        '''
        Define test variables and initialize app.
        '''
        # launch and initialize app
        cls.app = app
        cls.client = cls.app.test_client
        db.app = cls.app
        db.init_app(cls.app)
        db.drop_all()

        # create all tables
        db.create_all()

        # binds the app to the current context(??)
        # not quite sure if I understand this part...
        #
        # cls.app_context = cls.app.app_context():
        #   cls.db = SQLAlchemy()
        #   cls.db.init_app(cls.app)
        #   # create all tables
        #   cls.db.create_all()

        # mock actor, movie and role
        actor1 = Actor(name="First Actor", age=2, gender="Male")
        movie1 = Movie(title="First Movie", date="2020-12-12")
        role1 = Role(role_name="First Role", actor_id=1, movie_id=1)

        db.session.add_all([actor1, movie1, role1])
        db.session.commit()

        # Authorization header
        cls.assistant_header = {
            "Content-Type": "application/json",
            "Authorization": "Bearer " + assistant_token,
        }
        cls.director_header = {
            "Content-Type": "application/json",
            "Authorization": "Bearer " + director_token,
        }
        cls.producer_header = {
            "Content-Type": "application/json",
            "Authorization": "Bearer " + producer_token,
        }

        # new actor, movie, role use for testing
        cls.new_actor = {
            "name": "Amy",
            "age": 24,
            "gender": "Female",
        }
        cls.new_movie = {
            "title": "100 Days of Eraser",
            "date": "2036-01-31",
        }
        cls.new_role = {
            "role_name": "Second Role",
            "actor_id": 1,
            "movie_id": 1,
        }

    def setUp(self):
        '''Excutes before each test'''
        pass

    def tearDown(self):
        '''Excutes after each test'''
        pass

    @classmethod
    def tearDownClass(cls):
        '''Excutes once at the end of all test case'''
        db.drop_all()
        db.session.commit()

    # ------------------------------------------------------
    # Permission roles and tokens are generated by Auth0
    #
    # All the logic tests use the producer token as it has full Permission
    # - Total number of logic test: 38
    # - Total number of auth test: 25
    # - Test total: 63 (Run time 10.375s)
    # ------------------------------------------------

    # ---------------------------------------
    # Actors (23 testes)
    # - success behavior test: 5
    # - error behavior test: 9
    # - auth test: 9
    # ----------------------------------------
    # Test success behavior for /actors
    # ----------------------------------------
    def test_get_actor_list(self):
        res = self.client().get('/actors', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['actors']))

    def test_add_an_actor(self):
        res = self.client().post('/actors',
                                 headers=self.producer_header,
                                 json=self.new_actor)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['actors']))
        self.assertEqual(data['actors'][0]['name'], 'Amy')

        #  delete data after a successful add request
        actor_id = str(data['actors'][0]['id'])
        delete_actor = self.client().delete('/actors/' + actor_id,
                                            headers=self.producer_header)

    def test_get_actor_detail(self):
        res = self.client().get('/actors/1', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['actors']))
        self.assertEqual(data['actors'][0]['name'], 'First Actor')

    def test_edit_actor_detail(self):
        res = self.client().patch('/actors/1',
                                  headers=self.producer_header,
                                  json={'age': 16})
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['actors']))
        self.assertEqual(data['actors'][0]['age'], 16)

    def test_delete_an_actor(self):
        # add data beforehead to test delete request
        add_actor = self.client().post('/actors',
                                       headers=self.producer_header,
                                       json=self.new_actor)
        add_data = json.loads(add_actor.data)

        actor_id = str(add_data['actors'][0]['id'])
        res = self.client().delete('/actors/' + actor_id,
                                   headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['deleted_actors']))
        self.assertEqual(data['deleted_actors'][0]['id'], int(actor_id))

    # ----------------------------------------
    # Test error behavior for /actors
    # ----------------------------------------
    def test_405_get_actors_with_bad_methods(self):
        res = self.client().patch('/actors', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 405)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'method not found')

    def test_400_add_an_actor_without_request_body(self):
        res = self.client().post('/actors', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 400)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'bad request')

    def test_400_add_an_actor_with_bad_param(self):
        res = self.client().post('/actors',
                                 headers=self.producer_header,
                                 json={'something': 'random json body'})
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 400)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'bad request')

    def test_400_add_an_actor_with_age_non_integer(self):
        res = self.client().post('/actors',
                                 headers=self.producer_header,
                                 json={
                                     'name': 'Bad Parameter',
                                     'age': "twelve"
                                 })
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 400)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'bad request')

    def test_404_get_non_existing_actor_detail(self):
        res = self.client().get('/actors/1000', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 404)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'resource not found')

    def test_404_edit_non_existing_actor_detail(self):
        res = self.client().patch('/actors/1000',
                                  headers=self.producer_header,
                                  json={'age': 16})
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 404)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'resource not found')

    def test_400_edit_actor_detail_with_bad_param(self):
        res = self.client().patch('/actors/1',
                                  headers=self.producer_header,
                                  json={'bad_param': 'really bad param'})
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 400)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'bad request')

    def test_400_edit_actor_detail_with_bad_param_type(self):
        res = self.client().patch('/actors/1',
                                  headers=self.producer_header,
                                  json={'age': 'sixteen'})
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 400)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'bad request')

    def test_404_delete_non_existing_actor(self):
        res = self.client().delete('/actors/1000',
                                   headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 404)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'resource not found')

    # ----------------------------------------
    # Test auth behavior for /actors
    # ----------------------------------------

    # Assistant

    def test_assistant_get_actor_list(self):
        res = self.client().get('/actors', headers=self.assistant_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['actors']))

    def test_assistant_add_an_actor(self):
        res = self.client().post('/actors', headers=self.assistant_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 401)
        self.assertEqual(data['code'], 'unauthorized')
        self.assertEqual(data['description'], 'Permission not found.')

    def test_assistant_edit_an_actor(self):
        res = self.client().patch('/actors/1', headers=self.assistant_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 401)
        self.assertEqual(data['code'], 'unauthorized')
        self.assertEqual(data['description'], 'Permission not found.')

    def test_assistant_delete_an_actor(self):
        res = self.client().delete('/actors/1', headers=self.assistant_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 401)
        self.assertEqual(data['code'], 'unauthorized')
        self.assertEqual(data['description'], 'Permission not found.')

    # Director

    def test_director_get_actor_list(self):
        res = self.client().get('/actors', headers=self.director_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['actors']))

    def test_director_add_an_actor(self):
        res = self.client().post('/actors',
                                 headers=self.director_header,
                                 json=self.new_actor)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['actors']))
        self.assertEqual(data['actors'][0]['name'], 'Amy')

        #  delete data after a successful add request
        actor_id = str(data['actors'][0]['id'])
        delete_actor = self.client().delete('/actors/' + actor_id,
                                            headers=self.director_header)

    def test_director_edit_actor_detail(self):
        res = self.client().patch('/actors/1',
                                  headers=self.director_header,
                                  json={'age': 28})
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['actors']))
        self.assertEqual(data['actors'][0]['age'], 28)

    def test_director_delete_an_actor(self):
        # add data beforehead to test delete request
        add_actor = self.client().post('/actors',
                                       headers=self.director_header,
                                       json=self.new_actor)
        add_data = json.loads(add_actor.data)

        actor_id = str(add_data['actors'][0]['id'])
        res = self.client().delete('/actors/' + actor_id,
                                   headers=self.director_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['deleted_actors']))
        self.assertEqual(data['deleted_actors'][0]['id'], int(actor_id))

    # Producer

    def test_producer_get_actor_list(self):
        res = self.client().get('/actors', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['actors']))

    # ----------------------------------------
    # Movies (23 tests)
    # - success behavior test: 5
    # - error behavior test: 9
    # - auth test: 9
    # ----------------------------------------
    # Test success behavior for /movies
    # ----------------------------------------
    def test_get_movie_list(self):
        res = self.client().get('/movies', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['movies']))

    def test_add_an_movie(self):
        res = self.client().post('/movies',
                                 headers=self.producer_header,
                                 json=self.new_movie)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['movies']))
        self.assertEqual(data['movies'][0]['title'], '100 Days of Eraser')

        #  delete data after a successful add request
        movie_id = str(data['movies'][0]['id'])
        delete_movie = self.client().delete('/movies/' + movie_id,
                                            headers=self.producer_header)

    def test_get_movie_detail(self):
        res = self.client().get('/movies/1', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['movies']))
        self.assertEqual(data['movies'][0]['title'], 'First Movie')

    def test_edit_movie_detail(self):
        res = self.client().patch('/movies/1',
                                  headers=self.producer_header,
                                  json={'title': '101 Pencils'})
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['movies']))
        self.assertEqual(data['movies'][0]['title'], '101 Pencils')

        # revert data to original
        revert_data = self.client().patch('/movies/1',
                                          headers=self.producer_header,
                                          json={'title': 'First Movie'})

    def test_delete_an_movie(self):
        # add data beforehead to test delete request
        add_movie = self.client().post('/movies',
                                       headers=self.producer_header,
                                       json=self.new_movie)
        add_data = json.loads(add_movie.data)

        movie_id = str(add_data['movies'][0]['id'])
        res = self.client().delete('/movies/' + movie_id,
                                   headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['deleted_movies']))
        self.assertEqual(data['deleted_movies'][0]['id'], int(movie_id))

    # ----------------------------------------
    # Test error behavior for /movies
    # ----------------------------------------
    def test_405_get_movies_with_bad_methods(self):
        res = self.client().patch('/movies', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 405)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'method not found')

    def test_400_add_an_movie_without_request_body(self):
        res = self.client().post('/movies', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 400)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'bad request')

    def test_400_add_an_movie_with_bad_param(self):
        res = self.client().post('/movies',
                                 headers=self.producer_header,
                                 json={'something': 'random json body'})
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 400)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'bad request')

    def test_400_add_an_movie_with_non_date_type(self):
        res = self.client().post('/movies',
                                 headers=self.producer_header,
                                 json={
                                     'title': 'Bad Parameter',
                                     'date': "Monday at 12:01am"
                                 })
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 400)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'bad request')

    def test_404_get_non_existing_movie_detail(self):
        res = self.client().get('/movies/1000', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 404)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'resource not found')

    def test_404_edit_non_existing_movie_detail(self):
        res = self.client().patch('/movies/1000',
                                  headers=self.producer_header,
                                  json={'title': "New Movie"})
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 404)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'resource not found')

    def test_400_edit_movie_detail_with_bad_param(self):
        res = self.client().patch('/movies/1',
                                  headers=self.producer_header,
                                  json={'height': '182cm'})
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 400)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'bad request')

    def test_400_edit_movie_detail_with_bad_param_type(self):
        res = self.client().patch('/movies/1',
                                  headers=self.producer_header,
                                  json={'date': 'Merry christmas'})
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 400)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'bad request')

    def test_404_delete_non_existing_movie_detail(self):
        res = self.client().delete('/movies/1000',
                                   headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 404)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'resource not found')

    # ----------------------------------------
    # Test auth behavior for /movies
    # ----------------------------------------

    # Assistant

    def test_assistant_get_movie_list(self):
        res = self.client().get('/movies', headers=self.assistant_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['movies']))

    def test_assistant_add_a_movie(self):
        res = self.client().post('/movies', headers=self.assistant_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 401)
        self.assertEqual(data['code'], 'unauthorized')
        self.assertEqual(data['description'], 'Permission not found.')

    def test_assistant_edit_a_movie(self):
        res = self.client().patch('/movies/1', headers=self.assistant_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 401)
        self.assertEqual(data['code'], 'unauthorized')
        self.assertEqual(data['description'], 'Permission not found.')

    def test_assistant_delete_a_movie(self):
        res = self.client().delete('/movies/1', headers=self.assistant_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 401)
        self.assertEqual(data['code'], 'unauthorized')
        self.assertEqual(data['description'], 'Permission not found.')

    # Director

    def test_director_get_movie_list(self):
        res = self.client().get('/movies', headers=self.director_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['movies']))

    def test_director_add_a_movie(self):
        res = self.client().post('/movies', headers=self.director_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 401)
        self.assertEqual(data['code'], 'unauthorized')
        self.assertEqual(data['description'], 'Permission not found.')

    def test_director_edit_movie_detail(self):
        res = self.client().patch('/movies/1',
                                  headers=self.director_header,
                                  json={'title': '102 Rulers'})
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['movies']))
        self.assertEqual(data['movies'][0]['title'], '102 Rulers')

    def test_director_delete_a_movie(self):
        res = self.client().delete('/movies/1', headers=self.director_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 401)
        self.assertEqual(data['code'], 'unauthorized')
        self.assertEqual(data['description'], 'Permission not found.')

    # Producer

    def test_producer_get_movie_list(self):
        res = self.client().get('/movies', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['movies']))

    # ----------------------------------------
    # Castings (17 testes)
    # - success behavior test: 3
    # - error behavior test: 7
    # - auth test: 7
    # ----------------------------------------
    # Test success behavior for /castings
    # ----------------------------------------
    def test_get_castings_list(self):
        res = self.client().get('/castings', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['roles']))

    def test_add_a_role(self):
        res = self.client().post('/castings',
                                 headers=self.producer_header,
                                 json=self.new_role)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['roles']))
        self.assertEqual(data['roles'][0]['role_name'], 'Second Role')

        #  delete data after a successful add request
        role_id = str(data['roles'][0]['id'])
        delete_role = self.client().delete('/castings/' + role_id,
                                           headers=self.producer_header)

    def test_delete_a_role(self):
        # add data beforehead to test delete request
        add_role = self.client().post('/castings',
                                      headers=self.producer_header,
                                      json=self.new_role)
        add_data = json.loads(add_role.data)

        # role_id = "2"
        role_id = str(add_data['roles'][0]['id'])
        res = self.client().delete('/castings/' + role_id,
                                   headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['deleted_roles']))
        self.assertEqual(data['deleted_roles'][0]['id'], int(role_id))

    # ----------------------------------------
    # Test error behavior for /casting
    # ----------------------------------------
    def test_405_get_castings_with_bad_methods(self):
        res = self.client().patch('/castings', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 405)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'method not found')

    def test_405_get_castings_non_existing_url(self):
        res = self.client().get('/castings/1', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 405)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'method not found')

    def test_400_add_an_role_without_request_body(self):
        res = self.client().post('/castings', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 400)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'bad request')

    def test_400_add_an_role_with_bad_param(self):
        res = self.client().post('/castings',
                                 headers=self.producer_header,
                                 json={'something': 'random json body'})
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 400)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'bad request')

    def test_400_add_an_role_with_non_existing_actor(self):
        res = self.client().post('/castings',
                                 headers=self.producer_header,
                                 json={
                                     'role_name': 'Bad Parameter',
                                     'actor_id': 1000,
                                     'movie_id': 1
                                 })
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 400)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'bad request')

    def test_400_add_an_role_with_non_existing_movie(self):
        res = self.client().post('/castings',
                                 headers=self.producer_header,
                                 json={
                                     'role_name': 'Bad Parameter',
                                     'actor_id': 1,
                                     'movie_id': 1000
                                 })
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 400)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'bad request')

    def test_404_delete_non_existing_role(self):
        res = self.client().delete('/castings/1000',
                                   headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 404)
        self.assertEqual(data['success'], False)
        self.assertEqual(data['message'], 'resource not found')

    # ----------------------------------------
    # Test auth behavior for /castings
    # ----------------------------------------

    # Assistant

    def test_assistant_get_castings_list(self):
        res = self.client().get('/castings', headers=self.assistant_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['roles']))

    def test_assistant_add_a_role(self):
        res = self.client().post('/castings', headers=self.assistant_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 401)
        self.assertEqual(data['code'], 'unauthorized')
        self.assertEqual(data['description'], 'Permission not found.')

    def test_assistant_delete_a_role(self):
        res = self.client().delete('/castings/1',
                                   headers=self.assistant_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 401)
        self.assertEqual(data['code'], 'unauthorized')
        self.assertEqual(data['description'], 'Permission not found.')

    # Director

    def test_director_get_castings_list(self):
        res = self.client().get('/castings', headers=self.director_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['roles']))

    def test_director_add_a_role(self):
        res = self.client().post('/castings', headers=self.director_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 401)
        self.assertEqual(data['code'], 'unauthorized')
        self.assertEqual(data['description'], 'Permission not found.')

    def test_director_delete_a_role(self):
        res = self.client().delete('/castings/1', headers=self.director_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 401)
        self.assertEqual(data['code'], 'unauthorized')
        self.assertEqual(data['description'], 'Permission not found.')

    # Producer

    def test_producer_get_castings_list(self):
        res = self.client().get('/castings', headers=self.producer_header)
        data = json.loads(res.data)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(data['success'], True)
        self.assertTrue(len(data['roles']))


# Make the tests conveniently executable
if __name__ == "__main__":
    unittest.main()
