{
	"info": {
		"_postman_id": "4113dedc-48c8-44d5-90e4-4dbcdeac366d",
		"name": "capstone-check-auth",
		"description": "For Udacity FSND capstone project. ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Assistant",
			"item": [
				{
					"name": "/actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains actors array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actors).to.be.an('array')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/actors",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "/actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"name\": \"Amy\",\r\n    \"age\": 24,\r\n    \"gender\": \"Female\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "/actors/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"age\": 36\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/actors/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/actors/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains movies array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.movies).to.be.an('array')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/movies",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "/movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"title\": \"Starbucks\",\r\n    \"date\": \"2020-02-02\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/movies",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "/movies/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Coffee By Design\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/movies/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/movies/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/movies/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/castings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains casting array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roles).to.be.an('array')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/castings",
							"host": [
								"{{host}}"
							],
							"path": [
								"castings"
							]
						}
					},
					"response": []
				},
				{
					"name": "/castings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"role_name\": \"barista\",\r\n    \"actor_id\": 1,\r\n    \"movie_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/castings",
							"host": [
								"{{host}}"
							],
							"path": [
								"castings"
							]
						}
					},
					"response": []
				},
				{
					"name": "/castings/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/castings/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"castings",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"description": "permission:\r\n    get:actors\r\n    get:movies\r\n    get:castings",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Imppb1c5X01qVXFLN1h6Wkctb2hpcSJ9.eyJpc3MiOiJodHRwczovL2FjYXN0aW5nLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MDBiMTlhZDUxODUzYjAwNmEwMGM5NDIiLCJhdWQiOiJjYXN0aW5nIiwiaWF0IjoxNjExNzI1MDk0LCJleHAiOjE2MTE4MTE0OTQsImF6cCI6ImJ0blBzTTM5UkdLOGxxeWNaUVZSeDZnd3ZUaWFrZ2xjIiwic2NvcGUiOiIiLCJwZXJtaXNzaW9ucyI6WyJnZXQ6YWN0b3JzIiwiZ2V0OmNhc3RpbmdzIiwiZ2V0Om1vdmllcyJdfQ.aqSktGXVuWVTvUWU2A2yzJJ7g1Xe9mDEoFLSZsWEiusMExwO_aOa9rcytfV4MBVyNJoufAj-yovmqtmPkaZ18pfYvKtxN5mHhxIcWHiyq-TC6RkUsVIOHzKMyczaMMKlTuZMoTJrMfiIdOHhi_ktQzB0hM1YC2xW7zAF3z6w-_S1dcJcHmnzB9xpj4z9zgNorApz6kf3Lv5dV2-QjpuYIb6yuK5nAe4yYYkqP8wP-j1dDxFD_swSKb5vrDxFk8N3W1AvCuJ9anCjmamw_HrVuUCc8tmOIkH0E4csExH0C6kA60Hmx2nbHnpsidkLHGgZxqgYw1JNwx1ok_ZchtIhnQ",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Director",
			"item": [
				{
					"name": "/actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains actors array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actors).to.be.an('array')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/actors",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "/actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 99,\r\n    \"name\": \"Amy\",\r\n    \"age\": 24,\r\n    \"gender\": \"Female\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "/actors/99",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains actors array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actors).to.be.an('array')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"age\": 36\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors/99",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								"99"
							]
						}
					},
					"response": []
				},
				{
					"name": "/actors/99",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/actors/99",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								"99"
							]
						}
					},
					"response": []
				},
				{
					"name": "/movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains movies array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.movies).to.be.an('array')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/movies",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "/movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"title\": \"Starbucks\",\r\n    \"date\": \"2020-02-02\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/movies",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "/movies (using Producer token to add movie and test patch)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Imppb1c5X01qVXFLN1h6Wkctb2hpcSJ9.eyJpc3MiOiJodHRwczovL2FjYXN0aW5nLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MDBiMTlhZDUxODUzYjAwNmEwMGM5NDIiLCJhdWQiOiJjYXN0aW5nIiwiaWF0IjoxNjExMzczMTYzLCJleHAiOjE2MTE0NTk1NjMsImF6cCI6ImJ0blBzTTM5UkdLOGxxeWNaUVZSeDZnd3ZUaWFrZ2xjIiwic2NvcGUiOiIiLCJwZXJtaXNzaW9ucyI6WyJkZWxldGU6YWN0b3JzIiwiZGVsZXRlOmNhc3RpbmdzIiwiZGVsZXRlOm1vdmllcyIsImdldDphY3RvcnMiLCJnZXQ6Y2FzdGluZ3MiLCJnZXQ6bW92aWVzIiwicGF0Y2g6YWN0b3JzIiwicGF0Y2g6bW92aWVzIiwicG9zdDphY3RvcnMiLCJwb3N0OmNhc3RpbmdzIiwicG9zdDptb3ZpZXMiXX0.Ypfq87sD_KuWB2bPxAguXgPvOBSX83Yhz_uaHlARIV90Zeai6_2LVp0WDZgX1_kbyAM1xKOfFS4k4ybN9oFPV4pSLv816hNobyEgtT6cMWyHu2_0NG23HgOn2ZdwHwEoSsJYa-PAiSdnE7F7N6Zs-Cwpm_j-GlnV0Kk6zjxn32iOumcsbEjfhZiy6Kfwe6do7KNDu4vNv16FquDVmv15VUyqoHqnEwUZ3IYjDIpOLPA4gSROtnNcFzsWmPdyYBUmWbbvGn90JO1omO1z6THT7LarG87WQRidE3IyAo2WOkLeiAoGHshoh0r7sWHt9n3HwwAz5GCEqoIc3xC6gQNnaA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 99,\r\n    \"title\": \"Starbucks\",\r\n    \"date\": \"2020-02-02\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/movies",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "/movies/99",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains movies array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.movies).to.be.an('array')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Coffee By Design\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/movies/99",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies",
								"99"
							]
						}
					},
					"response": []
				},
				{
					"name": "/movies/99 (using Producer token to clear up patch test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Imppb1c5X01qVXFLN1h6Wkctb2hpcSJ9.eyJpc3MiOiJodHRwczovL2FjYXN0aW5nLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MDBiMTlhZDUxODUzYjAwNmEwMGM5NDIiLCJhdWQiOiJjYXN0aW5nIiwiaWF0IjoxNjExMzczMTYzLCJleHAiOjE2MTE0NTk1NjMsImF6cCI6ImJ0blBzTTM5UkdLOGxxeWNaUVZSeDZnd3ZUaWFrZ2xjIiwic2NvcGUiOiIiLCJwZXJtaXNzaW9ucyI6WyJkZWxldGU6YWN0b3JzIiwiZGVsZXRlOmNhc3RpbmdzIiwiZGVsZXRlOm1vdmllcyIsImdldDphY3RvcnMiLCJnZXQ6Y2FzdGluZ3MiLCJnZXQ6bW92aWVzIiwicGF0Y2g6YWN0b3JzIiwicGF0Y2g6bW92aWVzIiwicG9zdDphY3RvcnMiLCJwb3N0OmNhc3RpbmdzIiwicG9zdDptb3ZpZXMiXX0.Ypfq87sD_KuWB2bPxAguXgPvOBSX83Yhz_uaHlARIV90Zeai6_2LVp0WDZgX1_kbyAM1xKOfFS4k4ybN9oFPV4pSLv816hNobyEgtT6cMWyHu2_0NG23HgOn2ZdwHwEoSsJYa-PAiSdnE7F7N6Zs-Cwpm_j-GlnV0Kk6zjxn32iOumcsbEjfhZiy6Kfwe6do7KNDu4vNv16FquDVmv15VUyqoHqnEwUZ3IYjDIpOLPA4gSROtnNcFzsWmPdyYBUmWbbvGn90JO1omO1z6THT7LarG87WQRidE3IyAo2WOkLeiAoGHshoh0r7sWHt9n3HwwAz5GCEqoIc3xC6gQNnaA",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/movies/99",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies",
								"99"
							]
						}
					},
					"response": []
				},
				{
					"name": "/movies/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/movies/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/castings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains casting array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roles).to.be.an('array')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/castings",
							"host": [
								"{{host}}"
							],
							"path": [
								"castings"
							]
						}
					},
					"response": []
				},
				{
					"name": "/castings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"role_name\": \"barista\",\r\n    \"actor_id\": 1,\r\n    \"movie_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/castings",
							"host": [
								"{{host}}"
							],
							"path": [
								"castings"
							]
						}
					},
					"response": []
				},
				{
					"name": "/castings/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/castings/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"castings",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"description": "permission:\r\n    get:actors\r\n    post:actors\r\n    delete:actors\r\n    patch:actors\r\n\r\n    get:movies\r\n    patch:movies\r\n    \r\n    get:castings",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Imppb1c5X01qVXFLN1h6Wkctb2hpcSJ9.eyJpc3MiOiJodHRwczovL2FjYXN0aW5nLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MDBiMTlhZDUxODUzYjAwNmEwMGM5NDIiLCJhdWQiOiJjYXN0aW5nIiwiaWF0IjoxNjExNzI1MzE0LCJleHAiOjE2MTE4MTE3MTQsImF6cCI6ImJ0blBzTTM5UkdLOGxxeWNaUVZSeDZnd3ZUaWFrZ2xjIiwic2NvcGUiOiIiLCJwZXJtaXNzaW9ucyI6WyJkZWxldGU6YWN0b3JzIiwiZ2V0OmFjdG9ycyIsImdldDpjYXN0aW5ncyIsImdldDptb3ZpZXMiLCJwYXRjaDphY3RvcnMiLCJwYXRjaDptb3ZpZXMiLCJwb3N0OmFjdG9ycyJdfQ.lGLdA_U5YGKAd8u-P1eqKGoWQ2c2Rw_tOo2QkRxDLF-Ek4_8SYzwmey6zS6hQAn9pEv9ad3Nw_4m7GtGi-EO4j1I-CLIQTiF6ZpKxYGJU-PMgPz2bnj0EwzkmMteV4ghOrHxIkj4z1fMLAxODPVrCIgKXi3ruQV59iz9_9aPR0DSgG88mZCB0LOjFJ9rQojNjK92B2eV6MY5gTpqwijkAwf3DAIyIe7Q2padv2OswrShA8zJD3aDtwc1c4TwOJhDn3E8KXQSU9RuVlpuYrFU1ZX2auRjskdSRkUI9EOSusCjTHz4K6AmYn3_9j_VpyGPe1RmXfmS7xB9rB7RCJ9Ztg",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Producer",
			"item": [
				{
					"name": "actors",
					"item": [
						{
							"name": "/actors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains actors array\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actors).to.be.an('array')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/actors",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors"
									]
								}
							},
							"response": []
						},
						{
							"name": "/actors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 99,\r\n    \"name\": \"Amy\",\r\n    \"age\": 24,\r\n    \"gender\": \"Female\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors"
									]
								}
							},
							"response": []
						},
						{
							"name": "/actors/99",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains actors array\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actors).to.be.an('array')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/actors/99",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "/actors/99",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains actors array\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actors).to.be.an('array')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"age\": 36\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/99",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "/actors/99",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/actors/99",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"99"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "movies",
					"item": [
						{
							"name": "/movies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains movies array\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.movies).to.be.an('array')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/movies",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "/movies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 99,\r\n    \"title\": \"Starbucks\",\r\n    \"date\": \"2020-02-02\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "/movies/99",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains movies array\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.movies).to.be.an('array')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/movies/99",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "/movies/99",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains movies array\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.movies).to.be.an('array')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Coffee By Design\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies/99",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "/movies/99",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/movies/99",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"99"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "castings",
					"item": [
						{
							"name": "/actors Copy (required for POST castings)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 99,\r\n    \"name\": \"Amy\",\r\n    \"age\": 24,\r\n    \"gender\": \"Female\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors"
									]
								}
							},
							"response": []
						},
						{
							"name": "/movies Copy (required for POST castings)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 99,\r\n    \"title\": \"Starbucks\",\r\n    \"date\": \"2020-02-02\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "/castings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains roles array\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.roles).to.be.an('array')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/castings",
									"host": [
										"{{host}}"
									],
									"path": [
										"castings"
									]
								}
							},
							"response": []
						},
						{
							"name": "/castings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 99,\r\n    \"role_name\": \"barista\",\r\n    \"actor_id\": 99,\r\n    \"movie_id\": 99\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/castings",
									"host": [
										"{{host}}"
									],
									"path": [
										"castings"
									]
								}
							},
							"response": []
						},
						{
							"name": "/castings/1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/castings/99",
									"host": [
										"{{host}}"
									],
									"path": [
										"castings",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "/actors/1 Copy (clearup record)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/actors/99",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "/movies/1 Copy (clearup record)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/movies/99",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"99"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Has full permission:\r\n    get:actors\r\n    post:actors\r\n    patch:actors\r\n    delete:actors\r\n\r\n    get:movies\r\n    post:movies\r\n    patch:movies\r\n    delete:movies\r\n\r\n    get:castings\r\n    post:castings\r\n    delete:castings",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Imppb1c5X01qVXFLN1h6Wkctb2hpcSJ9.eyJpc3MiOiJodHRwczovL2FjYXN0aW5nLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MDBiMTlhZDUxODUzYjAwNmEwMGM5NDIiLCJhdWQiOiJjYXN0aW5nIiwiaWF0IjoxNjExNzI1NDAzLCJleHAiOjE2MTE4MTE4MDMsImF6cCI6ImJ0blBzTTM5UkdLOGxxeWNaUVZSeDZnd3ZUaWFrZ2xjIiwic2NvcGUiOiIiLCJwZXJtaXNzaW9ucyI6WyJkZWxldGU6YWN0b3JzIiwiZGVsZXRlOmNhc3RpbmdzIiwiZGVsZXRlOm1vdmllcyIsImdldDphY3RvcnMiLCJnZXQ6Y2FzdGluZ3MiLCJnZXQ6bW92aWVzIiwicGF0Y2g6YWN0b3JzIiwicGF0Y2g6bW92aWVzIiwicG9zdDphY3RvcnMiLCJwb3N0OmNhc3RpbmdzIiwicG9zdDptb3ZpZXMiXX0.HM7twJzCgz0H9FIqzgBLsPHhQXUtHJENdq425sPxKFqLesjk_0yzRWOtEnaG41kj4bpTvUATfbdl8fEwmWi2emlgjj5y6Z4Aolvs0Pkc5TyF3JIWqHeb4DqRvCelto11Eo7ic0MMRSiIuLQKf_4mJkvn0oDY0HCEJ9DpNx04oRqBlPJYJz5xAWd5cCrSD9UA2TLgkw2yPR9twQBq8Dyzo97fPjyl-Hq3Zdh6l1vVGV5300b3yfC_FchNimyVAC6bzBRojoNlQTVLvuM8dgH812oHeycEyPCHbMIxqIHYcJFaH0QJgWid3oDegIG1Ou6KGYipHyncQ3fn8OOHZffn4Q",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "main page",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}",
					"host": [
						"{{host}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost:5000"
		}
	]
}